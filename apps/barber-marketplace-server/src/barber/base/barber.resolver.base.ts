/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Barber } from "./Barber";
import { BarberCountArgs } from "./BarberCountArgs";
import { BarberFindManyArgs } from "./BarberFindManyArgs";
import { BarberFindUniqueArgs } from "./BarberFindUniqueArgs";
import { CreateBarberArgs } from "./CreateBarberArgs";
import { UpdateBarberArgs } from "./UpdateBarberArgs";
import { DeleteBarberArgs } from "./DeleteBarberArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BarberLocationInputDto } from "../BarberLocationInputDto";
import { BarberOutputDto } from "../BarberOutputDto";
import { BarberService } from "../barber.service";
@graphql.Resolver(() => Barber)
export class BarberResolverBase {
  constructor(protected readonly service: BarberService) {}

  async _barbersMeta(
    @graphql.Args() args: BarberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Barber])
  async barbers(@graphql.Args() args: BarberFindManyArgs): Promise<Barber[]> {
    return this.service.barbers(args);
  }

  @graphql.Query(() => Barber, { nullable: true })
  async barber(
    @graphql.Args() args: BarberFindUniqueArgs
  ): Promise<Barber | null> {
    const result = await this.service.barber(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Barber)
  async createBarber(@graphql.Args() args: CreateBarberArgs): Promise<Barber> {
    return await this.service.createBarber({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Barber)
  async updateBarber(
    @graphql.Args() args: UpdateBarberArgs
  ): Promise<Barber | null> {
    try {
      return await this.service.updateBarber({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Barber)
  async deleteBarber(
    @graphql.Args() args: DeleteBarberArgs
  ): Promise<Barber | null> {
    try {
      return await this.service.deleteBarber(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Barber,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Query(() => [BarberOutputDto])
  async SearchBarbers(
    @graphql.Args()
    args: BarberLocationInputDto
  ): Promise<BarberOutputDto[]> {
    return this.service.SearchBarbers(args);
  }
}
