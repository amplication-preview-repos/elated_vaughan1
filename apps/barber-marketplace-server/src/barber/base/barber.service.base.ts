/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Barber as PrismaBarber,
  Booking as PrismaBooking,
} from "@prisma/client";
import { BarberLocationInputDto } from "../BarberLocationInputDto";
import { BarberOutputDto } from "../BarberOutputDto";

export class BarberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BarberCountArgs, "select">): Promise<number> {
    return this.prisma.barber.count(args);
  }

  async barbers(args: Prisma.BarberFindManyArgs): Promise<PrismaBarber[]> {
    return this.prisma.barber.findMany(args);
  }
  async barber(
    args: Prisma.BarberFindUniqueArgs
  ): Promise<PrismaBarber | null> {
    return this.prisma.barber.findUnique(args);
  }
  async createBarber(args: Prisma.BarberCreateArgs): Promise<PrismaBarber> {
    return this.prisma.barber.create(args);
  }
  async updateBarber(args: Prisma.BarberUpdateArgs): Promise<PrismaBarber> {
    return this.prisma.barber.update(args);
  }
  async deleteBarber(args: Prisma.BarberDeleteArgs): Promise<PrismaBarber> {
    return this.prisma.barber.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.barber
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
  async SearchBarbers(
    args: BarberLocationInputDto
  ): Promise<BarberOutputDto[]> {
    throw new Error("Not implemented");
  }
}
